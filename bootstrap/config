#!/bin/bash

NEO4J_VER=2.3.0

MY_PATH="`dirname \"$0\"`" 
MY_PATH="`( cd \"$MY_PATH\" && pwd )`"  # absolutized and normalized

BIN_DIR=../server/bin
NEO4J_DIR=$BIN_DIR/neo4j-community-$NEO4J_VER
NEO4J_SERVER_CONF_FILE=$NEO4J_DIR/conf/neo4j-server.properties
LOG_FILE=$MY_PATH/config.log

CONS_DIV="#####################################"
R_COL="\e[31m"
Y_COL="\e[33m"
G_COL="\e[92m"
DEF_COL="\e[39m"

function loggerGreen {
	echo -e $G_COL$1$DEF_COL
	echo -e $1 >> $LOG_FILE
}

function loggerRed {
	echo -e >&2 $R_COL$1$DEF_COL
	echo -e $1 >> $LOG_FILE
}

function loggerYellow {
	echo -e >&2 $Y_COL$1$DEF_COL
	echo -e $1 >> $LOG_FILE
}

#-----------------------------------------#

loggerGreen "\n\n **Config script for Red-Social-Asociacion**\n\n"

#-----------------------------------------#

#----------------------------------------#

# Getting in the right location

if [ -z "$MY_PATH" ] ; then
  # error; for some reason, the path is not accessible
  # to the script (e.g. permissions re-evaled after suid)
  loggerRed "Please verify permissions on bootstrap folder!\n"
  exit 1  # fail
fi
cd "$MY_PATH"

#-----------------------------------------#
# Clean log file
echo "" > $LOG_FILE

#-----------------------------------------#
# Configure Neo4J Server

STATUS=`./$NEO4J_DIR/bin/neo4j status`
if [[ $STATUS != *"not"* ]]
then
    loggerGreen "Stopping Neo4J Server...\n"
	./$BIN_DIR/neoStop >/dev/null 2>&1 || { loggerRed "Error stopping Neo4J Server!\n"; exit 1; }
fi

loggerGreen "Configuring Neo4J Server...\n"
sed -i "s/bms.security.auth_enabled=.*/bms.security.auth_enabled=true/" $NEO4J_SERVER_CONF_FILE
sed -i "s/org.neo4j.server.webserver.port=.*/org.neo4j.server.webserver.port=4550/" $NEO4J_SERVER_CONF_FILE
sed -i "s/org.neo4j.server.webserver.https.enabled=.*/org.neo4j.server.webserver.https.enabled=false/" $NEO4J_SERVER_CONF_FILE
sed -i "s/org.neo4j.server.webserver.https.port=.*/org.neo4j.server.webserver.https.port=4551/" $NEO4J_SERVER_CONF_FILE

#-----------------------------------------#
# Start Neo4J server

STATUS=`./$NEO4J_DIR/bin/neo4j status`
if [[ $STATUS == *"not"* ]]
then
    loggerGreen "Starting Neo4J Server...\n"
	./$BIN_DIR/neoRun >/dev/null 2>&1 || { loggerRed "Error starting Neo4J Server!\n"; exit 1; }
fi

if [[ $# -eq 2 ]] && [[ "$2" = "NET" ]]
then
    echo -e $R_COL"Please give all arguments:\n\n- password\n- HOST_TYPE (LOC,LAN,NET)\n- SITE (if NET, e.g: mecatronicauncu.org)\n"$DEF_COL
    exit 1
elif [[ $# -gt 3 ]]
then
    echo -e $R_COL"Please give all arguments:\n\n- password\n- HOST_TYPE (LOC,LAN,NET)\n- SITE (if NET, e.g: mecatronicauncu.org)\n"$DEF_COL
    exit 1
fi

#-----------------------------------------#
# Create Dummy node:
# Requires a running server of Neo4J!
loggerGreen "Creating dummy node...\n"
./$NEO4J_DIR/bin/neo4j-shell -c 'CREATE (:DUMMY);' >/dev/null 2>&1 || { loggerRed "Could not create dummy node. Are you sure your Neo4J server is up and running?"; exit 1; }

#-----------------------------------------#
# Create email constraint
loggerGreen "Creating email uniqueness constraint...\n"
./$NEO4J_DIR/bin/neo4j-shell -c 'CREATE CONSTRAINT ON (n:User) ASSERT n.email IS UNIQUE;' >/dev/null 2>&1 ||  { loggerRed "Could not create constraint. Are you sure your Neo4J server is up and running?"; exit 1; }

#-----------------------------------------#
# Set new Neo4J server password
loggerGreen "Setting the Neo4J server password..."
if [[ $# -eq 0 ]]
then
    stty -echo
    printf $Y_COL"Enter your password: "$DEF_COL
    read PASSWORD
    printf "\n\n"
    stty echo
else
    PASSWORD="$1"
fi

curl -H "Content-Type: application/json" -X POST -d "{\"password\":\"$PASSWORD\"}" -u neo4j:neo4j http://localhost:4550/user/neo4j/password >/dev/null 2>&1 || { loggerRed "Could not change server password. Are you sure your Neo4J server is up and running?\n"; exit 1; }

# Set Neo4J user and password in testDataset/{usersRel.js, regUsers.js}
sed -i "s/^\(.*\)'http.*:\/\/neo4j:.*@localhost:.*'$/\1'http:\/\/neo4j:$PASSWORD@localhost:4550'/" ./testDataset/usersRel.js
sed -i "s/^\(.*\)'http.*:\/\/neo4j:.*@localhost:.*'$/\1'http:\/\/neo4j:$PASSWORD@localhost:4550'/" ./testDataset/regUsers.js

#-----------------------------------------#
# Set Neo4J user and password in routes
sed -i "s/^\(.*\)'http.*:\/\/neo4j:.*@localhost:.*'$/\1'http:\/\/neo4j:$PASSWORD@localhost:4550'/" $BIN_DIR/../routes/*.js

# Set Neo4J user and password in edt/regEdtNodes.js
sed -i "s/^\(.*\)'http.*:\/\/neo4j:.*@localhost:.*'$/\1'http:\/\/neo4j:$PASSWORD@localhost:4550'/" ./edt/regEdtNodes.js

#-----------------------------------------#
# Set host location in app.js
if [[ $# -eq 0 ]]
then
    hosts=("Local network" "The Internet")
    PS3="From where will Red-Social-Asociacion will be accessed? "
    echo -e $Y_COL
    select host in "${hosts[@]}"
    do
        case "$REPLY" in
            1 ) loggerGreen "\nSetting host location to this host LAN ip...\n"; sed -i "s/^\(.*\)REMOTE','http.*$/\1REMOTE','https:\/\/$(hostname -i | sed -e 's/[[:blank:]]\+$//'):3000')/" ../src/app/app.js; sed -i "s/^var domain=.*;$/var domain=\"https:\/\/$(hostname -i | sed -e 's/[[:blank:]]//'):3000\";/" ../server/routes/users.js;break;;
            2 ) loggerYellow "\nPlease enter your website: ";read SITE; sed -i "s/^\(.*\)REMOTE','http.*$/\1REMOTE','https:\/\/$SITE')/" ../src/app/app.js;  sed -i "s/^var domain=.*;$/var domain=\"https:\/\/$SITE\";/" ../server/routes/users.js;break;;
            * ) loggerRed "Invalid input, try again...";continue;;
        esac
    done
else
    HOST_TYPE="$2"
    if [[ "$HOST_TYPE" = "LAN" ]]
    then
        sed -i "s/^\(.*\)REMOTE','http.*$/\1REMOTE','https:\/\/$(hostname -i | sed -e 's/[[:blank:]]\+$//'):3000')/" ../src/app/app.js
        sed -i "s/^var domain=.*;$/var domain=\"https:\/\/$(hostname -i | sed -e 's/[[:blank:]]//'):3000\";/" ../server/routes/users.js
    elif [[ "$HOST_TYPE" = "NET" ]]
    then
        SITE="$3"
		sed -i "s/^\(.*\)REMOTE','http.*$/\1REMOTE','https:\/\/$SITE')/" ../src/app/app.js
		sed -i "s/^var domain=.*;$/var domain=\"https:\/\/$SITE\";/" ../server/routes/users.js
    fi
fi

#-----------------------------------------#
# Create Self-Signed Certificate
loggerGreen "Generating self signed SSL certificate...\n"
commonname=Red-Social-Asociacion
domain=$commonname
country=AR
state=Mendoza
locality=Mendoza
organization=Asociación\ de\ Mecatrónica\ de\ Mendoza
organizationalunit=IT
email=mecatronica-organizacion@lists.mecatronicauncu.org

# Optional
password=asoc

# Generate a key
openssl genrsa -des3 -passout pass:$password -out $BIN_DIR/../$domain.key 2048 -noout >/dev/null 2>&1 \
        || { loggerRed "Error generating SSL key\n"; exit 1; }

# Remove passphrase from the key. Comment the line out to keep the passphrase
openssl rsa -in $BIN_DIR/../$domain.key -passin pass:$password -out $BIN_DIR/../$domain.key >/dev/null 2>&1 \
        || { loggerRed "Error removing the passphrase from the key\n"; exit 1; }

# Create the request
openssl req -new -key $BIN_DIR/../$domain.key -out $BIN_DIR/../$domain.csr -passin pass:$password \
        -subj "/C=$country/ST=$state/L=$locality/O=$organization/OU=$organizationalunit/CN=$commonname/emailAddress=$email" >/dev/null 2>&1 \
        || { loggerRed "Error requesting SSL request\n"; exit 1; }

openssl x509 -req -days 365 -in $BIN_DIR/../$domain.csr -signkey $BIN_DIR/../$domain.key -out $BIN_DIR/../$domain.crt >/dev/null 2>&1 \
        || { loggerRed "Error generating SSL certificate\n"; exit 1; }


#-----------------------------------------#
# Stop Neo4J
./$BIN_DIR/neoStop >/dev/null 2>&1 || { loggerRed "Error stopping Neo4J server\n"; exit 1; }

#-----------------------------------------#
# Done!
loggerGreen "Config Ok!\n"

#-----------------------------------------#
# Tell user to configure max open files limit
loggerYellow "Yo! :"
loggerYellow "Remember to set the number of allowed open files to 40000 or more. Read the Linux performance guide of Neo4J for details.\n"


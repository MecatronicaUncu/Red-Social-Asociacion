#!/bin/bash

NEO4J_VER=2.3.3

MY_PATH="`dirname \"$0\"`" 
MY_PATH="`( cd \"$MY_PATH\" && pwd )`"  # absolutized and normalized

BIN_DIR=../server/bin
NEO4J_DIR=$BIN_DIR/neo4j-community-$NEO4J_VER
NEO4J_SERVER_CONF_FILE=$NEO4J_DIR/conf/neo4j-server.properties
NEO4J_CONF_FILE=$NEO4J_DIR/conf/neo4j.properties
LOG_FILE=$MY_PATH/config.log

CONS_DIV="#####################################"
R_COL="\e[31m"
Y_COL="\e[33m"
G_COL="\e[92m"
DEF_COL="\e[39m"

function loggerGreen {
	echo -e $G_COL$1$DEF_COL
	echo -e $1 >> $LOG_FILE
}

function loggerRed {
	echo -e >&2 $R_COL$1$DEF_COL
	echo -e $1 >> $LOG_FILE
}

function loggerYellow {
	echo -e >&2 $Y_COL$1$DEF_COL
	echo -e $1 >> $LOG_FILE
}

#-----------------------------------------#

loggerGreen "\n\n **Config script for Red-Social-Asociacion**\n\n"

#-----------------------------------------#

#----------------------------------------#

# Getting in the right location

if [ -z "$MY_PATH" ] ; then
  # error; for some reason, the path is not accessible
  # to the script (e.g. permissions re-evaled after suid)
  loggerRed "Please verify permissions on bootstrap folder!\n"
  exit 1  # fail
fi
cd "$MY_PATH"

#-----------------------------------------#
# Clean log file
echo "" > $LOG_FILE

#-----------------------------------------#
# Parsing commandline options
HOST_TYPE=""
SITE=""
PASSWORD=""
NOMAIL=1
if [[ $# -ne 0 ]]
then
	while [[ $# > 0 ]]
	do
		key="$1"
		case $key in
		-nomail)
			NOMAIL=0
			;;
		-h|--hosttype)
			shift
			HOST_TYPE="$1"
			if [[ "$HOST_TYPE" != "NET" ]] && [[ "$HOST_TYPE" != "LAN" ]]
			then
				loggerRed "Unrecognized host type. Use either LAN or NET"
				exit 1
			fi
			;;
		-p|--password)
			shift
			PASSWORD="$1"
			;;
		-s|--site)
			shift
			SITE="$1"
			;;
		--help)
			printf "Red-Social-Asociacion configuration script\n\n-nomail\t\tSkip mail configuration steps\n-h|-hosttype\tEither LAN or NET\n-p|--password\tNeo4j server password\n-s|--site\tWhen using host type NET, domain name of the site\n\n"
			exit 1
			;;
		*)
			loggerRed "There were some unrecognized options. Type config --help for mor information"
			exit 1
			;;
		esac
		shift
	done
fi

#-----------------------------------------#
# Configure Neo4J Server

STATUS=`./$NEO4J_DIR/bin/neo4j status`
if [[ $STATUS != *"not"* ]]
then
    loggerGreen "Stopping Neo4J Server...\n"
	./$BIN_DIR/neoStop >/dev/null 2>&1 || { loggerRed "Error stopping Neo4J Server!\n"; exit 1; }
fi

loggerGreen "Configuring Neo4J Server...\n"
sed -i "s/bms.security.auth_enabled=.*/bms.security.auth_enabled=true/" $NEO4J_SERVER_CONF_FILE
sed -i "s/org.neo4j.server.webserver.port=.*/org.neo4j.server.webserver.port=4550/" $NEO4J_SERVER_CONF_FILE
sed -i "s/org.neo4j.server.webserver.https.enabled=.*/org.neo4j.server.webserver.https.enabled=false/" $NEO4J_SERVER_CONF_FILE
sed -i "s/org.neo4j.server.webserver.https.port=.*/org.neo4j.server.webserver.https.port=4551/" $NEO4J_SERVER_CONF_FILE
sed -i "s/^[#]*dbms.security.load_csv_file_url_root=.*$/dbms.security.load_csv_file_url_root=..\/..\/..\/script\/Datasets/" $NEO4J_CONF_FILE

#-----------------------------------------#
# Start Neo4J server

STATUS=`./$NEO4J_DIR/bin/neo4j status`
if [[ $STATUS == *"not"* ]]
then
    loggerGreen "Starting Neo4J Server...\n"
	./$BIN_DIR/neoRun >/dev/null 2>&1 || { loggerRed "Error starting Neo4J Server!\n"; exit 1; }
fi

#-----------------------------------------#
# Create Dummy node:
# Requires a running server of Neo4J!
loggerGreen "Creating dummy node...\n"
./$NEO4J_DIR/bin/neo4j-shell -c 'MERGE (:DUMMY);' >/dev/null 2>&1 || { loggerRed "Could not create dummy node. Are you sure your Neo4J server is up and running?"; exit 1; }

#-----------------------------------------#
# Create email constraint
loggerGreen "Creating email uniqueness constraint...\n"
./$NEO4J_DIR/bin/neo4j-shell -c 'MERGE CONSTRAINT ON (n:User) ASSERT n.email IS UNIQUE;' >/dev/null 2>&1 ||  { loggerRed "Could not create constraint. Are you sure your Neo4J server is up and running?"; exit 1; }

#-----------------------------------------#
# Set new Neo4J server password
loggerGreen "Setting the Neo4J server password..."
if [[ -z "$PASSWORD" ]]
then
    stty -echo
    printf $Y_COL"Enter your password: "$DEF_COL
    read PASSWORD
    printf "\n\n"
    stty echo
fi

while [[ "$PASSWORD" == "neo4j" ]]
do
    stty -echo
    printf $Y_COL"Enter a different password ('neo4j' not possible): "$DEF_COL
    read PASSWORD
    printf "\n\n"
    stty echo
done

curl -H "Content-Type: application/json" -X POST -d "{\"password\":\"$PASSWORD\"}" -u neo4j:neo4j http://localhost:4550/user/neo4j/password >/dev/null 2>&1 || { loggerRed "Could not change server password. Are you sure your Neo4J server is up and running?\n"; exit 1; }

# Set Neo4J user and password in routes
sed -i "s/^\(.*\)'http.*:\/\/neo4j:.*@localhost:.*'$/\1'http:\/\/neo4j:$PASSWORD@localhost:4550'/" ../server/config/config.js

#-----------------------------------------#
# Set host location in config.js
if [[ -z "$HOST_TYPE" ]]
then
    hosts=("Local network" "The Internet")
    PS3="From where will Red-Social-Asociacion will be accessed? "
    echo -e $Y_COL
    select host in "${hosts[@]}"
    do
        case "$REPLY" in
            1 ) loggerGreen "\nSetting host location to this host LAN ip...\n"; sed -i "s/^var domain=.*;$/var domain=\"https:\/\/$(hostname -i | sed -e 's/[[:blank:]]//'):3000\";/" ../server/config/config.js;break;;
            2 ) loggerYellow "\nPlease enter your website: ";read SITE; sed -i "s/^var domain=.*;$/var domain=\"https:\/\/$SITE\";/" ../server/config/config.js;break;;
            * ) loggerRed "Invalid input, try again...";continue;;
        esac
    done
else
    if [[ "$HOST_TYPE" = "LAN" ]]
    then
        sed -i "s/^var domain=.*;$/var domain=\"https:\/\/$(hostname -i | sed -e 's/[[:blank:]]//'):3000\";/" ../server/config/config.js
    elif [[ "$HOST_TYPE" = "NET" ]]
    then
		if [[ -z "$SITE" ]]
		then
			loggerYellow"Please enter your website: "
			read SITE
        fi
		sed -i "s/^var domain=.*;$/var domain=\"https:\/\/$SITE\";/" ../server/config/config.js
    fi
fi

#-----------------------------------------#
# Create Self-Signed Certificate
loggerGreen "Generating self signed SSL certificate...\n"
commonname=Red-Social-Asociacion
domain=$commonname
country=AR
state=Mendoza
locality=Mendoza
organization=Asociación\ de\ Mecatrónica\ de\ Mendoza
organizationalunit=IT
email=mecatronica-organizacion@lists.mecatronicauncu.org

# Optional
password=asoc

# Generate a key
openssl genrsa -des3 -passout pass:$password -out $BIN_DIR/../$domain.key 2048 -noout >/dev/null 2>&1 \
        || { loggerRed "Error generating SSL key\n"; exit 1; }

# Remove passphrase from the key. Comment the line out to keep the passphrase
openssl rsa -in $BIN_DIR/../$domain.key -passin pass:$password -out $BIN_DIR/../$domain.key >/dev/null 2>&1 \
        || { loggerRed "Error removing the passphrase from the key\n"; exit 1; }

# Create the request
openssl req -new -key $BIN_DIR/../$domain.key -out $BIN_DIR/../$domain.csr -passin pass:$password \
        -subj "/C=$country/ST=$state/L=$locality/O=$organization/OU=$organizationalunit/CN=$commonname/emailAddress=$email" >/dev/null 2>&1 \
        || { loggerRed "Error requesting SSL request\n"; exit 1; }

openssl x509 -req -days 365 -in $BIN_DIR/../$domain.csr -signkey $BIN_DIR/../$domain.key -out $BIN_DIR/../$domain.crt >/dev/null 2>&1 \
        || { loggerRed "Error generating SSL certificate\n"; exit 1; }


#-----------------------------------------#
# Stop Neo4J
./$BIN_DIR/neoStop >/dev/null 2>&1 || { loggerRed "Error stopping Neo4J server\n"; exit 1; }

#-----------------------------------------#
# Extra configs in config.js

if [[ $NOMAIL -eq 1 ]]
then
	loggerGreen "Additional configuration"
	printf $Y_COL"You are about to configure the SMTP email settings. If you don't want to configure this now, you can modify the appropriate values in server/config/config.js. Bear in mind that, if you decide not to configure now, you'll have to run this script again to have access to all of the capabilities of this software."$DEF_COL

	printf $Y_COL"Enter the address of the smtp mail: "$DEF_COL
	read EMAILMAIL
	printf "\n"
	printf $Y_COL"Enter the name of the smtp host: "$DEF_COL
	read EMAILHOST
	printf "\n"
	printf $Y_COL"Enter the email address you want the receiver to read: "$DEF_COL
	read EMAILADD
	printf "\n"
	printf $Y_COL"Enter the name of the sender: "$DEF_COL
	read EMAILNAME
	printf "\n"
	printf $Y_COL"Enter the short-name of the sender: "$DEF_COL
	read EMAILSHORT
	printf "\n"
	stty -echo
	printf $Y_COL"Enter login password: "$DEF_COL
	read EMAILPASS
	printf "\n\n"
	stty echo

	sed -i "s/^var mailFrom =.*;$/var mailFrom = \'$EMAILSHORT <$EMAILADD>\';/" ../server/config/config.js
	sed -i "s/^var fromName =.*;$/var fromName = \'$EMAILNAME\';/" ../server/config/config.js
	sed -i "s/^var smtpUser =.*;$/var smtpUser = \'$EMAILMAIL\';/" ../server/config/config.js
	sed -i "s/^var smtpPass =.*;$/var smtpPass = \'$EMAILPASS\';/" ../server/config/config.js
	sed -i "s/^var smtpHost =.*;$/var smtpHost = \'$EMAILHOST\';/" ../server/config/config.js

	if [[ "$EMAILSHORT" == "" ]] || [[ "$EMAILADD" == "" ]] || [[ "$EMAILNAME" == "" ]] || [[ "$EMAILMAIL" == "" ]] || [[ "$EMAILPASS" == "" ]] || [[ "$EMAILHOST" == "" ]]
	then
		sed -i "s/^var mailServedConfigured =.*;$/var mailServedConfigured = false;/" ../server/config/config.js
	else
		sed -i "s/^var mailServedConfigured =.*;$/var mailServedConfigured = true;/" ../server/config/config.js
	fi
else
	sed -i "s/^var mailServedConfigured =.*;$/var mailServedConfigured = false;/" ../server/config/config.js
fi

#-----------------------------------------#
# Done!
loggerGreen "Config Ok!\n"

#-----------------------------------------#
# Tell user to configure max open files limit
loggerYellow "Yo! :"
loggerYellow "Remember to set the number of allowed open files to 40000 or more. Read the Linux performance guide of Neo4J for details.\n"

